import { SmfBinary } from '@/types';
import { parse } from '@/parse';
import { test, expect } from '@jest/globals';

type ParseTestCase = {
  input: string,
  output: SmfBinary,
};

// テストケース
// バイナリをきちんとheaderとtrackに分割できているかをテスト
//(parseという名前はちょっと違う気がするが...)
const testCases: ParseTestCase[] = [
  {
    input: '../test/smfFile/4536.mid',
    output: {
      headerBinary: new Uint8Array([0x4d, 0x54, 0x68, 0x64, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x02, 0x01, 0xe0]).buffer,
      trackBinarys: [
        new Uint8Array([0x4d, 0x54, 0x72, 0x6b, 0x00, 0x00, 0x00, 0x17, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0x58, 0x04, 0x04, 0x02, 0x18, 0x08, 0x00, 0xff, 0x51, 0x03, 0x07, 0xa1, 0x20, 0x00, 0xff, 0x2f, 0x00]).buffer,
        new Uint8Array([0x4d, 0x54, 0x72, 0x6b, 0x00, 0x00, 0x00, 0xaf, 0x00, 0xb0, 0x79, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0xb0, 0x0a, 0x40, 0x00, 0xb0, 0x07, 0x64, 0x00, 0xb0, 0x0b, 0x7f, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x02, 0x00, 0xb0, 0x06, 0x40, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x01, 0x00, 0xb0, 0x06, 0x40, 0x00, 0xb0, 0x26, 0x00, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x00, 0x00, 0xb0, 0x06, 0x0c, 0x00, 0xe0, 0x00, 0x40, 0x00, 0xb0, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x09, 0x02, 0x96, 0x40, 0x09, 0x02, 0xd6, 0x40, 0x09, 0x03, 0x06, 0x48, 0x74, 0x08, 0x02, 0x90, 0x00, 0x08, 0x02, 0xd0, 0x00, 0x08, 0x03, 0x00, 0x00, 0x09, 0x02, 0xb6, 0x40, 0x09, 0x03, 0x26, 0x40, 0x09, 0x02, 0xf6, 0x48, 0x74, 0x08, 0x02, 0xb0, 0x00, 0x08, 0x03, 0x20, 0x00, 0x08, 0x02, 0xf0, 0x00, 0x09, 0x02, 0x86, 0x40, 0x09, 0x02, 0xf6, 0x40, 0x09, 0x02, 0xb6, 0x48, 0x74, 0x08, 0x02, 0x80, 0x00, 0x08, 0x02, 0xf0, 0x00, 0x08, 0x02, 0xb0, 0x00, 0x09, 0x03, 0x06, 0x40, 0x09, 0x03, 0x46, 0x40, 0x09, 0x02, 0xd6, 0x48, 0x74, 0x08, 0x03, 0x00, 0x00, 0x08, 0x03, 0x40, 0x00, 0x08, 0x02, 0xd0, 0x00, 0xff, 0x2f, 0x00]).buffer,
      ]
    }
  },
  {
    input: '../test/smfFile/c.mid',
    output: {
      headerBinary: new Uint8Array([0x4d, 0x54, 0x68, 0x64, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x02, 0x01, 0xe0]).buffer,
      trackBinarys: [
        new Uint8Array([0x4d, 0x54, 0x72, 0x6b, 0x00, 0x00, 0x00, 0x17, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0x58, 0x04, 0x04, 0x02, 0x18, 0x08, 0x00, 0xff, 0x51, 0x03, 0x07, 0xa1, 0x20, 0x00, 0xff, 0x2f, 0x00]).buffer,
        new Uint8Array([0x4d, 0x54, 0x72, 0x6b, 0x00, 0x00, 0x00, 0x7f, 0x00, 0xb0, 0x79, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0xb0, 0x0a, 0x40, 0x00, 0xb0, 0x07, 0x64, 0x00, 0xb0, 0x0b, 0x7f, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x02, 0x00, 0xb0, 0x06, 0x40, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x01, 0x00, 0xb0, 0x06, 0x40, 0x00, 0xb0, 0x26, 0x00, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x00, 0x00, 0xb0, 0x06, 0x0c, 0x00, 0xe0, 0x00, 0x40, 0x00, 0xb0, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x09, 0x03, 0x06, 0x48, 0xf0, 0x08, 0x03, 0x00, 0x00, 0x09, 0x03, 0x46, 0x48, 0xf0, 0x08, 0x03, 0x40, 0x00, 0x09, 0x03, 0x76, 0x48, 0xf0, 0x08, 0x03, 0x70, 0x00, 0x09, 0x03, 0x76, 0x40, 0x09, 0x03, 0x46, 0x40, 0x09, 0x03, 0x06, 0x48, 0xf0, 0x08, 0x03, 0x70, 0x00, 0x80, 0x34, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0xff, 0x2f, 0x00]).buffer,
      ]
    }
  },
  {
    input: '../test/smfFile/wagamachi.mid',
    output: {
      headerBinary: new Uint8Array([0x4d, 0x54, 0x68, 0x64, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x02, 0x01, 0xe0]).buffer,
      trackBinarys: [
        new Uint8Array([0x4d, 0x54, 0x72, 0x6b, 0x00, 0x00, 0x00, 0x17, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0x58, 0x04, 0x04, 0x02, 0x18, 0x08, 0x00, 0xff, 0x51, 0x03, 0x07, 0xa1, 0x20, 0x00, 0xff, 0x2f, 0x00]).buffer,
        new Uint8Array([0x4d, 0x54, 0x72, 0x6b, 0x00, 0x00, 0x02, 0x8b, 0x00, 0xb0, 0x79, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0xb0, 0x0a, 0x40, 0x00, 0xb0, 0x07, 0x64, 0x00, 0xb0, 0x0b, 0x7f, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x02, 0x00, 0xb0, 0x06, 0x40, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x01, 0x00, 0xb0, 0x06, 0x40, 0x00, 0xb0, 0x26, 0x00, 0x00, 0xb0, 0x65, 0x00, 0x00, 0xb0, 0x64, 0x00, 0x00, 0xb0, 0x06, 0x0c, 0x00, 0xe0, 0x00, 0x40, 0x00, 0xb0, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x09, 0x03, 0xb6, 0x48, 0x74, 0x08, 0x03, 0xb0, 0x00, 0x09, 0x03, 0x96, 0x48, 0x36, 0x08, 0x03, 0x90, 0x00, 0x09, 0x03, 0x76, 0x48, 0x36, 0x08, 0x03, 0x70, 0x00, 0x09, 0x03, 0x26, 0x48, 0x36, 0x08, 0x03, 0x20, 0x00, 0x09, 0x03, 0x46, 0x48, 0x36, 0x08, 0x03, 0x40, 0x00, 0x09, 0x03, 0x26, 0x48, 0x74, 0x08, 0x03, 0x20, 0x08, 0x17, 0x09, 0x03, 0xb6, 0x48, 0x17, 0x08, 0x03, 0xb0, 0x00, 0x09, 0x03, 0x96, 0x48, 0x17, 0x08, 0x03, 0x90, 0x00, 0x09, 0x03, 0x76, 0x48, 0x17, 0x08, 0x03, 0x70, 0x00, 0x09, 0x03, 0x26, 0x48, 0x17, 0x08, 0x03, 0x20, 0x00, 0x09, 0x03, 0x46, 0x48, 0x17, 0x08, 0x03, 0x40, 0x00, 0x09, 0x03, 0x26, 0x48, 0x36, 0x08, 0x03, 0x20, 0x00, 0x09, 0x03, 0x46, 0x48, 0x36, 0x08, 0x03, 0x40, 0x00, 0x09, 0x03, 0x66, 0x48, 0x36, 0x08, 0x03, 0x60, 0x00, 0x09, 0x03, 0x76, 0x48, 0x55, 0x08, 0x03, 0x70, 0x00, 0x09, 0x03, 0x66, 0x48, 0x17, 0x08, 0x03, 0x60, 0x00, 0x09, 0x03, 0x76, 0x48, 0x36, 0x08, 0x03, 0x70, 0x00, 0x09, 0x03, 0x96, 0x48, 0x36, 0x08, 0x03, 0x90, 0x00, 0x09, 0x03, 0xb6, 0x48, 0x74, 0x08, 0x03, 0xb0, 0x00, 0x09, 0x03, 0x96, 0x48, 0x36, 0x08, 0x03, 0x90, 0x00, 0x09, 0x03, 0xb6, 0x48, 0x36, 0x08, 0x03, 0xb0, 0x00, 0x09, 0x03, 0x06, 0x40, 0x09, 0x03, 0x46, 0x40, 0x09, 0x02, 0xd6, 0x48, 0x74, 0x08, 0x03, 0x00, 0x00, 0x08, 0x03, 0x40, 0x00, 0x08, 0x02, 0xd0, 0x00, 0xff, 0x2f, 0x00]).buffer,
      ]
    }
  }
];